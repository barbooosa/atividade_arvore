O algoritmo BubbleSort √© um dos algoritmos de ordena√ß√£o mais simples, mas tamb√©m o menos eficiente para grandes volumes de dados. O seu funcionamento se baseia na ideia de "burbulhar" os elementos para suas posi√ß√µes corretas ao longo de v√°rias passagens na lista.

Funcionamento:

O algoritmo percorre a lista v√°rias vezes.
Em cada passagem, ele compara dois elementos adjacentes. Se o primeiro for maior que o segundo, eles s√£o trocados.
Isso faz com que, a cada passagem, o maior elemento "suba" para o final da lista (como uma bolha que sobe na √°gua).
Esse processo √© repetido at√© que a lista esteja ordenada, ou seja, at√© que uma passagem inteira n√£o precise de trocas.
Exemplo: Considerando a lista [5, 2, 9, 1]:

Primeira passagem:

Compara 5 e 2, troca -> [2, 5, 9, 1]
Compara 5 e 9, sem troca -> [2, 5, 9, 1]
Compara 9 e 1, troca -> [2, 5, 1, 9]

Segunda passagem:
Compara 2 e 5, sem troca -> [2, 5, 1, 9]
Compara 5 e 1, troca -> [2, 1, 5, 9]

Terceira passagem:
Compara 2 e 1, troca -> [1, 2, 5, 9]
Agora a lista est√° ordenada.

Complexidade:

Melhor caso: 
ùëÇ(ùëõ) (quando a lista j√° est√° ordenada).
Pior e m√©dio caso: 
O(n^2) (quando a lista est√° em ordem reversa ou aleat√≥ria).

2. SelectionSort:
O algoritmo SelectionSort tamb√©m √© simples, mas funciona de maneira diferente. Em vez de "burbulhar" os elementos como o BubbleSort, ele encontra o menor (ou maior) elemento em cada passagem e o coloca na posi√ß√£o correta.

Funcionamento:

O algoritmo percorre a lista e, a cada itera√ß√£o, encontra o menor (ou maior) elemento no restante da lista.
Esse elemento √© trocado com o primeiro elemento n√£o ordenado da lista.
Esse processo √© repetido at√© que toda a lista esteja ordenada.
Exemplo: Considerando a lista [5, 2, 9, 1]:

Primeira passagem:
O menor elemento √© 1. Troca 5 com 1 -> [1, 2, 9, 5]

Segunda passagem:
O menor elemento no restante da lista √© 2. N√£o √© necess√°rio trocar -> [1, 2, 9, 5]

Terceira passagem:
O menor elemento no restante da lista √© 5. Troca 9 com 5 -> [1, 2, 5, 9]
Agora a lista est√° ordenada.

Complexidade:
Melhor, pior e m√©dio caso: 

O(n^2).
Compara√ß√£o de trocas:
BubbleSort tende a executar mais trocas de elementos, pois ele troca sempre que encontra dois elementos fora de ordem.
SelectionSort, por outro lado, faz menos trocas, pois ele encontra o menor (ou maior) elemento e o coloca diretamente na posi√ß√£o correta, realizando uma troca por passagem (no m√°ximo uma troca por itera√ß√£o).